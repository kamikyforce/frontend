{
	"info": {
		"_postman_id": "e2aab303-5677-44fb-8424-6073fd27d2b1",
		"name": "Event Management API",
		"description": "Cole√ß√£o completa com automa√ß√£o de token e vari√°veis din√¢micas",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "24741240"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"if (response.success && response.data.token) {",
									"    pm.environment.set('token', response.data.token);",
									"    pm.environment.set('user_id', response.data.user.id);",
									"    console.log('Token e User ID salvos automaticamente!');",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"admin123\",\n  \"firstName\": \"Admin\",\n  \"lastName\": \"User\"\n}"
						},
						"url": "{{base_url}}/auth/register"
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"if (response.success && response.data.token) {",
									"    pm.environment.set('token', response.data.token);",
									"    pm.environment.set('user_id', response.data.user.id);",
									"    console.log('‚úÖ Login realizado! Token salvo automaticamente.');",
									"    console.log('Token:', response.data.token.substring(0, 20) + '...');",
									"} else {",
									"    console.log('‚ùå Erro no login:', response.message);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"admin123\"\n}\n"
						},
						"url": "{{base_url}}/auth/login"
					},
					"response": []
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Create Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"if (response.success && response.data.id) {",
									"    pm.environment.set('event_id', response.data.id);",
									"    console.log('‚úÖ Evento criado! ID salvo:', response.data.id);",
									"    console.log('Nome do evento:', response.data.name);",
									"} else {",
									"    console.log('‚ùå Erro ao criar evento:', response.message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Postman Dynamic Event\",\n  \"description\": \"Evento criado via automa√ß√£o Postman\",\n  \"eventDate\": \"2025-07-01T20:00:00.000Z\",\n  \"location\": \"Online\",\n  \"maxCapacity\": 100\n}"
						},
						"url": "{{base_url}}/events"
					},
					"response": []
				},
				{
					"name": "List Events",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": "{{base_url}}/events"
					},
					"response": []
				},
				{
					"name": "Get Event by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": "{{base_url}}/events/{{event_id}}"
					},
					"response": []
				},
				{
					"name": "Update Event",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Evento Atualizado via Postman\",\n  \"description\": \"Descri√ß√£o atualizada automaticamente\",\n  \"maxCapacity\": 150\n}"
						},
						"url": "{{base_url}}/events/{{event_id}}"
					},
					"response": []
				},
				{
					"name": "Delete Event",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": "{{base_url}}/events/{{event_id}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Reservations",
			"item": [
				{
					"name": "Reserve Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"if (response.success && response.data.id) {",
									"    pm.environment.set('reservation_id', response.data.id);",
									"    console.log('‚úÖ Reserva realizada! ID:', response.data.id);",
									"    console.log('Status:', response.data.status);",
									"} else {",
									"    console.log('‚ùå Erro na reserva:', response.message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"eventId\": \"{{event_id}}\"\n}"
						},
						"url": "{{base_url}}/events/{{event_id}}/reserve"
					},
					"response": []
				},
				{
					"name": "My Reservations",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": "{{base_url}}/my-reservations"
					},
					"response": []
				},
				{
					"name": "Cancel Reservation",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": "{{base_url}}/reservations/{{reservation_id}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Reports (Admin)",
			"item": [
				{
					"name": "Event Statistics",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": "{{base_url}}/admin/reports/events/{{event_id}}/stats"
					},
					"response": []
				},
				{
					"name": "Export Event Calendar",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": "{{base_url}}/reports/events/{{event_id}}/calendar"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"exec": [
					"// Script global executado antes de cada request",
					"console.log('üöÄ Executando request:', pm.info.requestName);",
					"console.log('üîó URL:', pm.request.url.toString());",
					"",
					"// Verificar se token existe para rotas protegidas",
					"const protectedRoutes = ['events', 'reservations', 'my-reservations', 'reports'];",
					"const currentUrl = pm.request.url.toString();",
					"const needsAuth = protectedRoutes.some(route => currentUrl.includes(route));",
					"",
					"if (needsAuth && !pm.environment.get('token')) {",
					"    console.log('‚ö†Ô∏è Token n√£o encontrado! Fa√ßa login primeiro.');",
					"}"
				],
				"type": "text/javascript"
			}
		},
		{
			"listen": "test",
			"script": {
				"exec": [
					"// Script global executado ap√≥s cada response",
					"console.log('üìä Status:', pm.response.status, pm.response.reason());",
					"console.log('‚è±Ô∏è Tempo de resposta:', pm.response.responseTime + 'ms');",
					"",
					"// Verificar se response √© v√°lido",
					"if (pm.response.status >= 400) {",
					"    console.log('‚ùå Erro na requisi√ß√£o:', pm.response.text());",
					"} else {",
					"    console.log('‚úÖ Requisi√ß√£o bem-sucedida!');",
					"}"
				],
				"type": "text/javascript"
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000/api",
			"type": "string"
		}
	]
}